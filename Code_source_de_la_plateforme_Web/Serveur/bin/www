#!/usr/bin/env node

/**
 * Dependances du module
 */

var app = require('../server');
var debug = require('debug')('serveur:server');
var http = require('http');

/**
 * Recuperer le port de l'environnement et le sauvegarder dans Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Creation du serveur HTTP
 */

var server = http.createServer(app);

/**
 * Ecoute sur le port fourni, sur tous les interfaces reseaux.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalisation du port en un nombre, une chaine de caractere ou faux
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // pipe nomme
    return val;
  }

  if (port >= 0) {
    // numero de port
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 * Gestionnaire d'evenements pour les evenements d'erreur du serveur HTTP
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // Gere les erreurs d'ecoute de message amicaux
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Gestionnaire d'evenements pour les evenements d'ecoute du serveur HTTP.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
